{"version":3,"sources":["AppContext.js","CircleButton/CircleButton.js","notes-helpers.js","NoteListNav/NoteListNav.js","NotePageNav/NotePageNav.js","Note/Note.js","NoteListMain/NoteListMain.js","NotePageMain/NotePageMain.js","NotefulForm/NotefulForm.js","ValidationError.js","AddFolder/AddFolder.js","AddNote/AddNote.js","App/App.js","index.js"],"names":["AppContext","React","createContext","notes","folders","deleteNote","addFolder","NavCircleButton","props","tag","className","childrenm","otherProps","Object","objectWithoutProperties","createElement","objectSpread","join","children","defaultProps","findNote","arguments","length","undefined","noteId","find","note","id","NoteListNav","react_default","a","src_AppContext","Consumer","context","map","folder","key","NavLink","to","concat","folderId","filter","countNotesForFolder","name","Link","type","react_fontawesome_index_es","icon","Component","NotePageNav","role","onClick","history","goBack","Note","Fragment","format","modified","NoteListMain","Note_Note","NotePageMain","content","split","para","i","NotefulForm","assign","action","ValidationError","hasError","message","AddFolder","state","folderName","folderNameValid","validationMessages","event","preventDefault","console","log","this","fieldErrors","setState","formValid","_this2","validateFolderName","_this3","NotefulForm_NotefulForm","onSubmit","handleSubmit","htmlFor","onChange","e","updateFolderName","target","value","src_ValidationError","disabled","contextType","AddNote","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","noteName","noteValid","noteContent","contentValid","noteFolder","validationErrors","addNote","validateName","validateContent","_this4","updateName","updateContent","updateFolder","App","handleDeleteNote","newNotes","fetch","then","res","json","resJson","catch","error","method","headers","Accept","Content-Type","body","JSON","stringify","_this$state","path","Route","exact","component","render","routeProps","match","params","findFolder","NotePageNav_NotePageNav","notesForFolder","getNotesForFolder","NoteListMain_NoteListMain","NotePageMain_NotePageMain","contextValue","postFolderName","Provider","renderNavRoutes","renderMainRoutes","library","add","faPlus","faChevronLeft","faTrashAlt","faCheckDouble","ReactDOM","BrowserRouter","src_App_App","document","getElementById"],"mappings":"kYAWeA,EATIC,IAAMC,cACrB,CACIC,MAAO,GACPC,QAAS,GACTC,WAAY,aACZC,UAAW,8CCJJ,SAASC,EAAgBC,GACeA,EAA7CC,IAA6CD,EAAxCE,UAAwCF,EAA7BG,UADqB,IACPC,EADOC,OAAAC,EAAA,EAAAD,CACQL,EADR,iCAG7C,OAAOP,IAAMc,cACXP,EAAMC,IADDI,OAAAG,EAAA,EAAAH,CAAA,CAGHH,UAAW,CAAC,kBAAmBF,EAAME,WAAWO,KAAK,MAClDL,GAELJ,EAAMU,UAIVX,EAAgBY,aAAc,CAC5BV,IAAK,KChBA,IAGMW,EAAW,eAACjB,EAADkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAO,GAAIG,EAAXH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OACtBpB,EAAMsB,KAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAOH,KC2ClBI,0LAtCX,OACAC,EAAAC,EAAAf,cAACgB,EAAWC,SAAZ,KACG,SAAAC,GAAO,OACNJ,EAAAC,EAAAf,cAAA,OAAKL,UAAU,eACfmB,EAAAC,EAAAf,cAAA,MAAIL,UAAU,qBACXuB,EAAQ7B,QAAQ8B,IAAI,SAAAC,GAAM,OACzBN,EAAAC,EAAAf,cAAA,MAAIqB,IAAKD,EAAOR,IACdE,EAAAC,EAAAf,cAACsB,EAAA,EAAD,CACE3B,UAAU,2BACV4B,GAAE,WAAAC,OAAaJ,EAAOR,KAEtBE,EAAAC,EAAAf,cAAA,QAAML,UAAU,0BDRG,eAACP,EAADkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAO,GAAImB,EAAXnB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OACjCpB,EAAMsC,OAAO,SAAAf,GAAI,OAAIA,EAAKc,WAAaA,IAAUlB,OCQhCoB,CAAoBT,EAAQ9B,MAAOgC,EAAOR,KAE5CQ,EAAOQ,UAKhBd,EAAAC,EAAAf,cAAA,OAAKL,UAAU,+BACbmB,EAAAC,EAAAf,cAACR,EAAD,CACEE,IAAKmC,IACLN,GAAG,cACHO,KAAK,SACLnC,UAAU,kCAEVmB,EAAAC,EAAAf,cAAC+B,EAAA,EAAD,CAAiBC,KAAK,SACtBlB,EAAAC,EAAAf,cAAA,WAPF,qBAtBgBd,IAAM+C,kBCHjB,SAASC,EAAYzC,GAClC,OACEqB,EAAAC,EAAAf,cAAA,OAAKL,UAAU,eACbmB,EAAAC,EAAAf,cAACR,EAAD,CACEE,IAAI,SACJyC,KAAK,OACLC,QAAS,kBAAM3C,EAAM4C,QAAQC,UAC7B3C,UAAU,4BAEVmB,EAAAC,EAAAf,cAAC+B,EAAA,EAAD,CAAiBC,KAAK,iBACtBlB,EAAAC,EAAAf,cAAA,WAPF,QAUCP,EAAM2B,QACLN,EAAAC,EAAAf,cAAA,MAAIL,UAAU,4BACXF,EAAM2B,OAAOQ,OAOxBM,EAAY9B,aAAe,CACzBiC,QAAS,CACPC,OAAQ,kCCtBG,SAASC,EAAK9C,GAC3B,OACEqB,EAAAC,EAAAf,cAAA,OAAKL,UAAU,QACbmB,EAAAC,EAAAf,cAACgB,EAAWC,SAAZ,KACG,SAAAC,GAAO,OACJJ,EAAAC,EAAAf,cAAAc,EAAAC,EAAAyB,SAAA,KACA1B,EAAAC,EAAAf,cAAA,MAAIL,UAAU,eACZmB,EAAAC,EAAAf,cAAC6B,EAAA,EAAD,CAAMN,GAAE,SAAAC,OAAW/B,EAAMmB,KACtBnB,EAAMmC,OAGXd,EAAAC,EAAAf,cAAA,UAAQL,UAAU,eAAemC,KAAK,SAASM,QAAS,SAACxB,GAAD,OAAQM,EAAQ5B,WAAWG,EAAMmB,MACvFE,EAAAC,EAAAf,cAAC+B,EAAA,EAAD,CAAiBC,KAAK,cACrB,IAFH,UAKAlB,EAAAC,EAAAf,cAAA,OAAKL,UAAU,eACbmB,EAAAC,EAAAf,cAAA,OAAKL,UAAU,wBAAf,WAEG,IACDmB,EAAAC,EAAAf,cAAA,QAAML,UAAU,QACb8C,iBAAOhD,EAAMiD,SAAU,6BCrB3B,SAASC,EAAalD,GACnC,OACEqB,EAAAC,EAAAf,cAAA,WAASL,UAAU,gBACjBmB,EAAAC,EAAAf,cAAA,UACGP,EAAML,MAAM+B,IAAI,SAAAR,GAAI,OACnBG,EAAAC,EAAAf,cAAA,MAAIqB,IAAKV,EAAKC,IACZE,EAAAC,EAAAf,cAAC4C,EAAD,CACEhC,GAAID,EAAKC,GACTgB,KAAMjB,EAAKiB,KACXc,SAAU/B,EAAK+B,eAKvB5B,EAAAC,EAAAf,cAAA,OAAKL,UAAU,kCACbmB,EAAAC,EAAAf,cAACR,EAAD,CACEE,IAAKmC,IACLN,GAAG,YACHO,KAAK,SACLnC,UAAU,iCAEVmB,EAAAC,EAAAf,cAAC+B,EAAA,EAAD,CAAiBC,KAAK,SACtBlB,EAAAC,EAAAf,cAAA,WAPF,UAeR2C,EAAavC,aAAe,CAC1BhB,MAAO,WClCM,SAASyD,EAAapD,GACnC,OACEqB,EAAAC,EAAAf,cAAA,WAASL,UAAU,gBACjBmB,EAAAC,EAAAf,cAAC4C,EAAD,CACEhC,GAAInB,EAAMkB,KAAKC,GACfgB,KAAMnC,EAAMkB,KAAKiB,KACjBc,SAAUjD,EAAMkB,KAAK+B,WAEvB5B,EAAAC,EAAAf,cAAA,OAAKL,UAAU,yBACZF,EAAMkB,KAAKmC,QAAQC,MAAM,YAAY5B,IAAI,SAAC6B,EAAMC,GAAP,OACxCnC,EAAAC,EAAAf,cAAA,KAAGqB,IAAK4B,GAAID,OAOtBH,EAAazC,aAAe,CAC1BO,KAAM,CACJmC,QAAS,YCpBE,SAASI,EAAYzD,GAAO,IACjCE,EAA6BF,EAA7BE,UAAcE,EADmBC,OAAAC,EAAA,EAAAD,CACJL,EADI,eAEzC,OACEqB,EAAAC,EAAAf,cAAA,OAAAF,OAAAqD,OAAA,CACExD,UAAW,CAAC,eAAgBA,GAAWO,KAAK,KAC5CkD,OAAO,KACHvD,ICPV,IASewD,EATS,SAAC5D,GACvB,OAAGA,EAAM6D,SAELxC,EAAAC,EAAAf,cAAA,OAAKL,UAAU,SAASF,EAAM8D,SAG3BzC,EAAAC,EAAAf,cAAAc,EAAAC,EAAAyB,SAAA,OCFYgB,qNAInBC,MAAQ,CACNC,WAAY,GACZC,iBAAiB,EACjBC,mBAAoB,kFAGTC,EAAOH,GAClBG,EAAMC,iBACNC,QAAQC,IAAI,qBACZC,KAAK/C,QAAQ3B,UAAUmE,8CAGN9B,GACjB,IAAIsC,EAAcD,KAAKR,MAAMG,mBACzBN,GAAW,EAGiB,IAFPW,KAAK/C,QAAQ7B,QAAQqC,OAAO,SAAAgC,GAAU,OAAI9B,IAAS8B,EAAW9B,OAElErB,SACnB2D,EAAc,6BACdZ,GAAW,GAGO,IAAhB1B,EAAKrB,SACP2D,EAAc,0BACdZ,GAAW,GAGbW,KAAKE,SAAS,CACZP,mBAAoBM,EACpBP,iBAAkBL,GACjBW,KAAKG,UAAUxC,sCAGVA,GACLqC,KAAKR,MAAME,iBACZM,KAAKE,SAAS,CAACT,WAAY9B,6CAIdA,GAAM,IAAAyC,EAAAJ,KACrBA,KAAKE,SAAS,CAACvC,QAAO,kBAAMyC,EAAKC,mBAAmB1C,sCAG7C,IAAA2C,EAAAN,KACP,OACEnD,EAAAC,EAAAf,cAAA,WAASL,UAAU,aACjBmB,EAAAC,EAAAf,cAAA,6BACAc,EAAAC,EAAAf,cAACwE,EAAD,CAAaC,SAAU,SAACZ,EAAOjC,GAAR,OAAiB2C,EAAKG,aAAab,EAAOU,EAAKd,MAAMC,cAC1E5C,EAAAC,EAAAf,cAAA,OAAKL,UAAU,SACbmB,EAAAC,EAAAf,cAAA,SAAO2E,QAAQ,qBAAf,QAGA7D,EAAAC,EAAAf,cAAA,SAAO8B,KAAK,OAAOlB,GAAG,oBAAoBgE,SAAU,SAACC,GAAD,OAAON,EAAKO,iBAAiBD,EAAEE,OAAOC,UAC1FlE,EAAAC,EAAAf,cAACiF,EAAD,CAAiB3B,UAAWW,KAAKR,MAAME,gBAAiBJ,QAASU,KAAKR,MAAMG,sBAE9E9C,EAAAC,EAAAf,cAAA,OAAKL,UAAU,WACbmB,EAAAC,EAAAf,cAAA,UAAQ8B,KAAK,SAASoD,UAAWjB,KAAKR,MAAME,iBAA5C,wBA5D2B1B,cAAlBuB,EAEZ2B,YAAclG,aCHFmG,cAQnB,SAAAA,EAAY3F,GAAO,IAAA4F,EAAA,OAAAvF,OAAAwF,EAAA,EAAAxF,CAAAmE,KAAAmB,IACjBC,EAAAvF,OAAAyF,EAAA,EAAAzF,CAAAmE,KAAAnE,OAAA0F,EAAA,EAAA1F,CAAAsF,GAAAK,KAAAxB,KAAMxE,KACDgE,MAAQ,CACXiC,SAAU,GACVC,WAAW,EACXC,YAAa,GACbC,cAAc,EACdC,WAAY,uCACZC,iBAAkB,CAChBL,SAAU,GACVE,YAAa,KAVAP,4EAcNxB,EAAO6B,EAAUE,EAAanE,GACzCoC,EAAMC,iBACNC,QAAQC,IAAI,qBACZC,KAAK/C,QAAQ8E,QAAQnC,EAAO6B,EAAUE,EAAanE,wCAGxCG,GACX,IAAI0B,GAAW,EAEK,IAAhB1B,EAAKrB,SACP+C,GAAW,GAGbW,KAAKE,SAAS,CACZwB,WAAYrC,4CAIAR,GACd,IAAIQ,GAAW,EAEQ,IAAnBR,EAAQvC,SACV+C,GAAW,GAGbW,KAAKE,SAAS,CACZ0B,cAAevC,sCAIT1B,GACLqC,KAAKR,MAAME,iBACZM,KAAKE,SAAS,CAACT,WAAY9B,uCAIpBA,GAAM,IAAAyC,EAAAJ,KACfA,KAAKE,SAAS,CAACuB,SAAU9D,GAAO,kBAAMyC,EAAK4B,aAAarE,2CAG5CkB,GAAS,IAAAyB,EAAAN,KACrBA,KAAKE,SAAS,CAACyB,YAAa9C,GAAU,kBAAMyB,EAAK2B,gBAAgBpD,0CAGtDrB,GACXwC,KAAKE,SAAS,CAAC2B,WAAYrE,qCAGpB,IAAA0E,EAAAlC,KACP,OACInD,EAAAC,EAAAf,cAAA,WAASL,UAAU,WACjBmB,EAAAC,EAAAf,cAAA,2BACAc,EAAAC,EAAAf,cAACwE,EAAD,CAAaC,SAAU,SAACZ,EAAOjC,EAAMkB,EAASrB,GAAvB,OAAoC0E,EAAKzB,aAAab,EAAOsC,EAAK1C,MAAMiC,SAAUS,EAAK1C,MAAMmC,YAAaO,EAAK1C,MAAMqC,cAC1IhF,EAAAC,EAAAf,cAAA,OAAKL,UAAU,SACbmB,EAAAC,EAAAf,cAAA,SAAO2E,QAAQ,mBAAf,QAGA7D,EAAAC,EAAAf,cAAA,SAAO8B,KAAK,OAAOlB,GAAG,kBAAkBgE,SAAU,SAAAC,GAAC,OAAIsB,EAAKC,WAAWvB,EAAEE,OAAOC,WAElFlE,EAAAC,EAAAf,cAAA,OAAKL,UAAU,SACbmB,EAAAC,EAAAf,cAAA,SAAO2E,QAAQ,sBAAf,WAGA7D,EAAAC,EAAAf,cAAA,YAAUY,GAAG,qBAAqBgE,SAAU,SAAAC,GAAC,OAAIsB,EAAKE,cAAcxB,EAAEE,OAAOC,WAE/ElE,EAAAC,EAAAf,cAAA,OAAKL,UAAU,SACbmB,EAAAC,EAAAf,cAAA,SAAO2E,QAAQ,sBAAf,UAGA7D,EAAAC,EAAAf,cAAA,UAAQY,GAAG,qBAAqBgE,SAAU,SAACC,GAAD,OAAOsB,EAAKG,aAAazB,EAAEE,OAAOC,SACzEf,KAAK/C,QAAQ7B,QAAQ8B,IAAI,SAAAC,GAAM,OAC9BN,EAAAC,EAAAf,cAAA,UAAQqB,IAAKD,EAAOR,GAAIoE,MAAO5D,EAAOR,IACnCQ,EAAOQ,UAKhBd,EAAAC,EAAAf,cAAA,OAAKL,UAAU,WACbmB,EAAAC,EAAAf,cAAA,UAAQ8B,KAAK,UAAb,sBApGuBG,aAAhBmD,EAEZD,YAAclG,EAFFmG,EAIZhF,aAAe,CACpBf,QAAS,eCkLEkH,6MA9Kb9C,MAAQ,CACNrE,MAAO,GACPC,QAAS,MAoIXmH,iBAAmB,SAAC5F,GAClB,IAAI6F,EAAWpB,EAAK5B,MAAMrE,MAAMsC,OAAO,SAACf,GACtC,OAAOA,EAAKC,KAAOA,IAErByE,EAAKlB,SAAS,CACZ/E,MAAOqH,wFAtIS,IAAApC,EAAAJ,KAClByC,MAAM,iCACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAO,OAAIzC,EAAKF,SAAS,CAC7B9E,QAASyH,MAEVC,MAAM,SAAAC,GAAK,OAAIjD,QAAQC,IAAIgD,KAE9BN,MAAM,+BACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAO,OAAIzC,EAAKF,SAAS,CAC7B/E,MAAO0H,MAERC,MAAM,SAAAC,GAAK,OAAIjD,QAAQC,IAAIgD,4CAGjBtD,GAEbgD,MADY,gCACD,CACTO,OAAQ,OACRC,QAAS,CACPC,OAAU,oCACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC3F,KAAM8B,MAE7BiD,KAAK,SAAAC,GAAG,OAAEA,EAAIC,SACdF,KAAK,SAAAC,GAAG,OAAI7C,QAAQC,IAAI4C,qCAGnB/C,EAAO6B,EAAUE,EAAanE,GACpCsC,QAAQC,IAAI,WAAY0B,GAExBgB,MADY,8BACD,CACTO,OAAQ,OACRC,QAAS,CACPC,OAAU,oCACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAC3F,KAAM8D,EAAU5C,QAAS8C,EAAanE,SAAUA,MAEvEkF,KAAK,SAAAC,GAAG,OAAEA,EAAIC,SACdF,KAAK,SAAAC,GAAG,OAAI7C,QAAQC,IAAI4C,+CAGT,IAAAY,EACWvD,KAAKR,MAAxBrE,EADQoI,EACRpI,MAAOC,EADCmI,EACDnI,QACf,OACEyB,EAAAC,EAAAf,cAAAc,EAAAC,EAAAyB,SAAA,KACG,CAAC,IAAK,qBAAqBrB,IAAI,SAAAsG,GAAI,OAClC3G,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACEC,OAAK,EACLtG,IAAKoG,EACLA,KAAMA,EACNG,UAAW/G,MAGfC,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACED,KAAK,gBACLI,OAAQ,SAAAC,GAAc,IACZrH,EAAWqH,EAAWC,MAAMC,OAA5BvH,OACFE,EAAON,EAASjB,EAAOqB,IAAW,GAClCW,EVhFQ,eAAC/B,EAADiB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAS,GAAImB,EAAbnB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OACxBnB,EAAQqB,KAAK,SAAAU,GAAM,OAAIA,EAAOR,KAAOa,IU+EZwG,CAAW5I,EAASsB,EAAKc,UACxC,OACEX,EAAAC,EAAAf,cAACkI,EAADpI,OAAAqD,OAAA,GACM2E,EADN,CAEE1G,OAAQA,QAKhBN,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACED,KAAK,cACLG,UAAW1F,IAEbpB,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACED,KAAK,YACLG,UAAW1F,gDAMA,IACT9C,EAAU6E,KAAKR,MAAfrE,MACR,OACE0B,EAAAC,EAAAf,cAAAc,EAAAC,EAAAyB,SAAA,KACG,CAAC,IAAK,qBAAqBrB,IAAI,SAAAsG,GAAI,OAClC3G,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACEC,OAAK,EACLtG,IAAKoG,EACLA,KAAMA,EACNI,OAAQ,SAAAC,GAAc,IACZrG,EAAaqG,EAAWC,MAAMC,OAA9BvG,SACF0G,EV1Ga,eAAC/I,EAADkB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAO,GAAImB,EAAXnB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAA,OAC7BiB,EAEErC,EAAMsC,OAAO,SAAAf,GAAI,OAAIA,EAAKc,WAAaA,IADvCrC,EUwG+BgJ,CAAkBhJ,EAAOqC,GAChD,OACEX,EAAAC,EAAAf,cAACqI,EAADvI,OAAAqD,OAAA,GACM2E,EADN,CAEE1I,MAAO+I,UAMjBrH,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACED,KAAK,gBACLI,OAAQ,SAAAC,GAAc,IACZrH,EAAWqH,EAAWC,MAAMC,OAA5BvH,OACFE,EAAON,EAASjB,EAAOqB,GAC7B,OACEK,EAAAC,EAAAf,cAACsI,EAADxI,OAAAqD,OAAA,GACM2E,EADN,CAEEnH,KAAMA,QAKdG,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACED,KAAK,cACLG,UAAWpE,IAEb1C,EAAAC,EAAAf,cAAC0H,EAAA,EAAD,CACED,KAAK,YACLG,UAAWxC,sCAgBjB,IAAMmD,EAAe,CACnBlJ,QAAS4E,KAAKR,MAAMpE,QACpBD,MAAO6E,KAAKR,MAAMrE,MAClBE,WAAY2E,KAAKuC,iBACjBjH,UAAW0E,KAAKuE,eAChBxC,QAAS/B,KAAK+B,SAGhB,OACElF,EAAAC,EAAAf,cAACgB,EAAWyH,SAAZ,CAAqBzD,MAAOuD,GAC1BzH,EAAAC,EAAAf,cAAA,OAAKL,UAAU,OACbmB,EAAAC,EAAAf,cAAA,OAAKL,UAAU,YACZsE,KAAKyE,mBAER5H,EAAAC,EAAAf,cAAA,UAAQL,UAAU,eAChBmB,EAAAC,EAAAf,cAAA,UACEc,EAAAC,EAAAf,cAAC6B,EAAA,EAAD,CAAMN,GAAG,KAAT,WACC,IACDT,EAAAC,EAAAf,cAAC+B,EAAA,EAAD,CAAiBC,KAAK,mBAG1BlB,EAAAC,EAAAf,cAAA,QAAML,UAAU,aACbsE,KAAK0E,6BAvKA1G,aCFlB2G,IAAQC,IAAIC,IAAQC,IAAeC,IAAYC,KAE/CC,IAASrB,OACP/G,EAAAC,EAAAf,cAACmJ,EAAA,EAAD,KACErI,EAAAC,EAAAf,cAACoJ,EAAD,OAEFC,SAASC,eAAe","file":"static/js/main.732f8e43.chunk.js","sourcesContent":["import React from 'react'\n\nconst AppContext = React.createContext(\n    {\n        notes: [],\n        folders: [],\n        deleteNote: () => {},\n        addFolder: () => {},\n    }\n)\n\nexport default AppContext","import React from 'react'\nimport './CircleButton.css'\n\nexport default function NavCircleButton(props) {\n  const { tag, className, childrenm, ...otherProps } = props\n\n  return React.createElement(\n    props.tag,\n    {\n      className: ['NavCircleButton', props.className].join(' '),\n      ...otherProps\n    },\n    props.children\n  )\n}\n\nNavCircleButton.defaultProps ={\n  tag: 'a',\n}\n","\nexport const findFolder = (folders=[], folderId) =>\n  folders.find(folder => folder.id === folderId)\n\nexport const findNote = (notes=[], noteId) =>\n  notes.find(note => note.id === noteId)\n\nexport const getNotesForFolder = (notes=[], folderId) => (\n  (!folderId)\n    ? notes\n    : notes.filter(note => note.folderId === folderId)\n)\n\nexport const countNotesForFolder = (notes=[], folderId) =>\n  notes.filter(note => note.folderId === folderId).length\n","import React from 'react'\nimport { NavLink, Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport CircleButton from '../CircleButton/CircleButton'\nimport { countNotesForFolder } from '../notes-helpers'\nimport './NoteListNav.css'\nimport AppContext from '../AppContext';\n\nclass NoteListNav extends React.Component {\n  render() { \n    return (\n    <AppContext.Consumer>\n      {context => (\n        <div className='NoteListNav'>\n        <ul className='NoteListNav__list'>\n          {context.folders.map(folder =>\n            <li key={folder.id}>\n              <NavLink\n                className='NoteListNav__folder-link'\n                to={`/folder/${folder.id}`}\n              >\n                <span className='NoteListNav__num-notes'>\n                  {countNotesForFolder(context.notes, folder.id)}\n                </span>\n                {folder.name}\n              </NavLink>\n            </li>\n          )}\n        </ul>\n        <div className='NoteListNav__button-wrapper'>\n          <CircleButton\n            tag={Link}\n            to='/add-folder'\n            type='button'\n            className='NoteListNav__add-folder-button'\n          >\n            <FontAwesomeIcon icon='plus' />\n            <br />\n            Folder\n          </CircleButton>\n        </div>\n        </div>\n      )}\n    </AppContext.Consumer>\n    )\n  }\n}\n\nexport default NoteListNav;\n\n// NoteListNav.defaultProps = {\n//   folders: []\n// }\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport CircleButton from '../CircleButton/CircleButton'\nimport './NotePageNav.css'\n\nexport default function NotePageNav(props) {\n  return (\n    <div className='NotePageNav'>\n      <CircleButton\n        tag='button'\n        role='link'\n        onClick={() => props.history.goBack()}\n        className='NotePageNav__back-button'\n      >\n        <FontAwesomeIcon icon='chevron-left' />\n        <br />\n        Back\n      </CircleButton>\n      {props.folder && (\n        <h3 className='NotePageNav__folder-name'>\n          {props.folder.name}\n        </h3>\n      )}\n    </div>\n  )\n}\n\nNotePageNav.defaultProps = {\n  history: {\n    goBack: () => {}\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { format } from 'date-fns'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport './Note.css'\nimport AppContext from '../AppContext';\n\nexport default function Note(props) {\n  return (\n    <div className='Note'>\n      <AppContext.Consumer>\n        {context => (\n            <>\n            <h2 className='Note__title'>\n              <Link to={`/note/${props.id}`}>\n                {props.name}\n              </Link>\n            </h2>\n            <button className='Note__delete' type='button' onClick={(id) => context.deleteNote(props.id)}>\n              <FontAwesomeIcon icon='trash-alt' />\n              {' '}\n              remove\n            </button>\n            <div className='Note__dates'>\n              <div className='Note__dates-modified'>\n                Modified\n                {' '}\n                <span className='Date'>\n                  {format(props.modified, 'Do MMM YYYY')}\n                </span>\n              </div>\n            </div>\n            </>\n          )\n        }\n      </AppContext.Consumer>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport Note from '../Note/Note'\nimport CircleButton from '../CircleButton/CircleButton'\nimport './NoteListMain.css'\n\nexport default function NoteListMain(props) {\n  return (\n    <section className='NoteListMain'>\n      <ul>\n        {props.notes.map(note =>\n          <li key={note.id}>\n            <Note\n              id={note.id}\n              name={note.name}\n              modified={note.modified}\n            />\n          </li>\n        )}\n      </ul>\n      <div className='NoteListMain__button-container'>\n        <CircleButton\n          tag={Link}\n          to='/add-note'\n          type='button'\n          className='NoteListMain__add-note-button'\n        >\n          <FontAwesomeIcon icon='plus' />\n          <br />\n          Note\n        </CircleButton>\n      </div>\n    </section>\n  )\n}\n\nNoteListMain.defaultProps = {\n  notes: [],\n}\n","import React from 'react'\nimport Note from '../Note/Note'\nimport './NotePageMain.css'\n\nexport default function NotePageMain(props) {\n  return (\n    <section className='NotePageMain'>\n      <Note\n        id={props.note.id}\n        name={props.note.name}\n        modified={props.note.modified}\n      />\n      <div className='NotePageMain__content'>\n        {props.note.content.split(/\\n \\r|\\n/).map((para, i) =>\n          <p key={i}>{para}</p>\n        )}\n      </div>\n    </section>\n  )\n}\n\nNotePageMain.defaultProps = {\n  note: {\n    content: '',\n  }\n}\n","import React from 'react'\nimport './NotefulForm.css'\n\nexport default function NotefulForm(props) {\n  const { className, ...otherProps } = props\n  return (\n    <form\n      className={['Noteful-form', className].join(' ')}\n      action='#'\n      {...otherProps}\n    />\n  )\n}\n","import React from 'react'\n\nconst ValidationError = (props) => {\n  if(props.hasError) {\n    return (\n      <div className=\"error\">{props.message}</div>\n    );\n  }\n  return <></>\n}\n\nexport default ValidationError","import React, { Component } from 'react'\nimport NotefulForm from '../NotefulForm/NotefulForm'\nimport AppContext from '../AppContext'\nimport ValidationError from '../ValidationError'\nimport './AddFolder.css'\n\nexport default class AddFolder extends Component {\n\n  static contextType = AppContext;\n\n  state = {\n    folderName: '',\n    folderNameValid: false,\n    validationMessages: null,\n  }\n  \n  handleSubmit(event, folderName) {\n    event.preventDefault()\n    console.log('handle submit ran')\n    this.context.addFolder(folderName);\n  }\n\n  validateFolderName(name) {\n    let fieldErrors = this.state.validationMessages;\n    let hasError = false;\n    const checkFolderNames = this.context.folders.filter(folderName => name === folderName.name);\n    \n    if (checkFolderNames.length !== 0) {\n      fieldErrors = 'Folder name already exists';\n      hasError = true;\n    }\n\n    if (name.length === 0) {\n      fieldErrors = 'Folder must have a name';\n      hasError = true;\n    }\n\n    this.setState({\n      validationMessages: fieldErrors,\n      folderNameValid: !hasError\n    }, this.formValid(name));\n  }\n\n  formValid(name) {\n    if(this.state.folderNameValid) {\n      this.setState({folderName: name})\n    }\n  }\n\n  updateFolderName(name) {\n    this.setState({name}, () => this.validateFolderName(name))\n  }\n  \n  render() {\n    return (\n      <section className='AddFolder'>\n        <h2>Create a folder</h2>\n        <NotefulForm onSubmit={(event, name) => this.handleSubmit(event, this.state.folderName)}>\n          <div className='field'>\n            <label htmlFor='folder-name-input'>\n              Name\n            </label>\n            <input type='text' id='folder-name-input' onChange={(e) => this.updateFolderName(e.target.value)}/>\n            <ValidationError hasError={!this.state.folderNameValid} message={this.state.validationMessages}/>\n          </div>\n          <div className='buttons'>\n            <button type='submit' disabled={!this.state.folderNameValid}>\n              Add folder\n            </button>\n          </div>\n        </NotefulForm>\n      </section>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport NotefulForm from '../NotefulForm/NotefulForm'\nimport './AddNote.css'\nimport AppContext from '../AppContext';\n\nexport default class AddNote extends Component {\n\n  static contextType = AppContext;\n\n  static defaultProps = {\n    folders: [],\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteName: '',\n      noteValid: false,\n      noteContent: '',\n      contentValid: false,\n      noteFolder: 'b0715efe-ffaf-11e8-8eb2-f2801f1b9fd1',\n      validationErrors: {\n        noteName: '',\n        noteContent: '',\n      },\n    }\n  }\n  handleSubmit(event, noteName, noteContent, folderId) {\n    event.preventDefault()\n    console.log('handle submit ran')\n    this.context.addNote(event, noteName, noteContent, folderId);\n  }\n\n  validateName(name) {    \n    let hasError = false;\n\n    if (name.length === 0) {\n      hasError = true;\n    }\n\n    this.setState({\n      noteValid: !hasError\n    })\n  }\n\n  validateContent(content) {    \n    let hasError = false;\n\n    if (content.length === 0) {\n      hasError = true;\n    }\n\n    this.setState({\n      contentValid: !hasError\n    })\n  }\n\n  formValid(name) {\n    if(this.state.folderNameValid) {\n      this.setState({folderName: name})\n    }\n  }\n\n  updateName(name) {\n    this.setState({noteName: name}, () => this.validateName(name))\n  }\n\n  updateContent(content) {\n    this.setState({noteContent: content}, () => this.validateContent(content))\n  }\n\n  updateFolder(folderId) {\n    this.setState({noteFolder: folderId})\n  }\n\n  render() {\n    return (\n        <section className='AddNote'>\n          <h2>Create a note</h2>\n          <NotefulForm onSubmit={(event, name, content, folderId) => this.handleSubmit(event, this.state.noteName, this.state.noteContent, this.state.noteFolder) }>\n            <div className='field'>\n              <label htmlFor='note-name-input'>\n                Name\n              </label>\n              <input type='text' id='note-name-input' onChange={e => this.updateName(e.target.value)} />\n            </div>\n            <div className='field'>\n              <label htmlFor='note-content-input'>\n                Content\n              </label>\n              <textarea id='note-content-input' onChange={e => this.updateContent(e.target.value)} />\n            </div>\n            <div className='field'>\n              <label htmlFor='note-folder-select'>\n                Folder\n              </label>\n              <select id='note-folder-select' onChange={(e) => this.updateFolder(e.target.value)} >\n                {this.context.folders.map(folder =>\n                  <option key={folder.id} value={folder.id}>\n                    {folder.name}\n                  </option>\n                )}\n              </select>\n            </div>\n            <div className='buttons'>\n              <button type='submit'>\n                Add note\n              </button>\n            </div>\n          </NotefulForm>\n        </section>\n      )\n  }\n}\n","import React, { Component } from 'react'\nimport { Route, Link } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport AppContext from '../AppContext'\nimport NoteListNav from '../NoteListNav/NoteListNav'\nimport NotePageNav from '../NotePageNav/NotePageNav'\nimport NoteListMain from '../NoteListMain/NoteListMain'\nimport NotePageMain from '../NotePageMain/NotePageMain'\nimport AddFolder from '../AddFolder/AddFolder'\nimport AddNote from '../AddNote/AddNote'\nimport { getNotesForFolder, findNote, findFolder } from '../notes-helpers'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    notes: [],\n    folders: [],\n  };\n\n  componentDidMount() {\n    fetch('http://localhost:9090/folders')\n      .then(res => res.json())\n      .then(resJson => this.setState({\n        folders: resJson,\n      }))\n      .catch(error => console.log(error))\n\n    fetch('http://localhost:9090/notes')\n      .then(res => res.json())\n      .then(resJson => this.setState({\n        notes: resJson,\n      }))\n      .catch(error => console.log(error))\n  }\n\n  postFolderName(folderName) {\n    const url = 'http://localhost:9090/folders'\n    fetch(url, {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({name: folderName})\n    })\n    .then(res=>res.json())\n    .then(res => console.log(res));\n  }\n\n  addNote(event, noteName, noteContent, folderId) {\n    console.log('noteName', noteName);\n    const url = 'http://localhost:9090/notes'\n    fetch(url, {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({name: noteName, content: noteContent, folderId: folderId})\n    })\n    .then(res=>res.json())\n    .then(res => console.log(res));\n  }\n\n  renderNavRoutes() {\n    const { notes, folders } = this.state\n    return (\n      <>\n        {['/', '/folder/:folderId'].map(path =>\n          <Route\n            exact\n            key={path}\n            path={path}\n            component={NoteListNav}\n          />\n        )}\n        <Route\n          path='/note/:noteId'\n          render={routeProps => {\n            const { noteId } = routeProps.match.params\n            const note = findNote(notes, noteId) || {}\n            const folder = findFolder(folders, note.folderId)\n            return (\n              <NotePageNav\n                {...routeProps}\n                folder={folder}\n              />\n            )\n          }}\n        />\n        <Route\n          path='/add-folder'\n          component={NotePageNav}\n        />\n        <Route\n          path='/add-note'\n          component={NotePageNav}\n        />\n      </>\n    )\n  }\n\n  renderMainRoutes() {\n    const { notes } = this.state\n    return (\n      <>\n        {['/', '/folder/:folderId'].map(path =>\n          <Route\n            exact\n            key={path}\n            path={path}\n            render={routeProps => {\n              const { folderId } = routeProps.match.params\n              const notesForFolder = getNotesForFolder(notes, folderId)\n              return (\n                <NoteListMain\n                  {...routeProps}\n                  notes={notesForFolder}\n                />\n              )\n            }}\n          />\n        )}\n        <Route\n          path='/note/:noteId'\n          render={routeProps => {\n            const { noteId } = routeProps.match.params\n            const note = findNote(notes, noteId)\n            return (\n              <NotePageMain\n                {...routeProps}\n                note={note}\n              />\n            )\n          }}\n        />\n        <Route\n          path='/add-folder'\n          component={AddFolder}\n        />\n        <Route\n          path='/add-note'\n          component={AddNote}\n        />\n      </>\n    )\n  }\n\n  handleDeleteNote = (id) => {\n    let newNotes = this.state.notes.filter((note) => {\n      return note.id !== id\n    })\n    this.setState({\n      notes: newNotes,\n    })\n  }\n\n  render() {\n    const contextValue = {\n      folders: this.state.folders,\n      notes: this.state.notes,\n      deleteNote: this.handleDeleteNote,\n      addFolder: this.postFolderName,\n      addNote: this.addNote\n    }\n\n    return (\n      <AppContext.Provider value={contextValue}>\n        <div className='App'>\n          <nav className='App__nav'>\n            {this.renderNavRoutes()}\n          </nav>\n          <header className='App__header'>\n            <h1>\n              <Link to='/'>Noteful</Link>\n              {' '}\n              <FontAwesomeIcon icon='check-double' />\n            </h1>\n          </header>\n          <main className='App__main'>\n            {this.renderMainRoutes()}\n          </main>\n        </div>\n      </AppContext.Provider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faPlus, faChevronLeft, faTrashAlt, faCheckDouble\n} from '@fortawesome/free-solid-svg-icons'\nimport { BrowserRouter } from 'react-router-dom'\nimport 'typeface-roboto'\nimport './index.css'\nimport App from './App/App'\n\nlibrary.add(faPlus, faChevronLeft, faTrashAlt, faCheckDouble)\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}