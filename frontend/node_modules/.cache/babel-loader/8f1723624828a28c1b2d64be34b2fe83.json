{"ast":null,"code":"import _classCallCheck from \"/Users/Home/Projects/noteful-client-2/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Home/Projects/noteful-client-2/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Home/Projects/noteful-client-2/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Home/Projects/noteful-client-2/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Home/Projects/noteful-client-2/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Home/Projects/noteful-client-2/frontend/src/AddFolder/AddFolder.js\";\nimport React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport AppContext from '../AppContext';\nimport ValidationError from '../ValidationError';\nimport './AddFolder.css';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nvar AddFolder =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddFolder, _Component);\n\n  function AddFolder() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddFolder);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddFolder)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      folderName: '',\n      folderNameValid: false,\n      validationMessages: null\n    };\n    return _this;\n  }\n\n  _createClass(AddFolder, [{\n    key: \"handleSubmit\",\n    value: function handleSubmit(event, folderName) {\n      event.preventDefault();\n      console.log('handle submit ran');\n      this.context.addFolder(folderName);\n    }\n  }, {\n    key: \"validateFolderName\",\n    value: function validateFolderName(name) {\n      var fieldErrors = this.state.validationMessages;\n      var hasError = false;\n      var checkFolderNames = this.context.folders.filter(function (folderName) {\n        return name === folderName.name;\n      });\n\n      if (checkFolderNames.length !== 0) {\n        fieldErrors = 'Folder name already exists';\n        hasError = true;\n      }\n\n      if (name.length === 0) {\n        fieldErrors = 'Folder must have a name';\n        hasError = true;\n      }\n\n      this.setState({\n        validationMessages: fieldErrors,\n        folderNameValid: !hasError\n      }, this.formValid(name));\n    }\n  }, {\n    key: \"formValid\",\n    value: function formValid(name) {\n      if (this.state.folderNameValid) {\n        this.setState({\n          folderName: name\n        });\n      }\n    }\n  }, {\n    key: \"updateFolderName\",\n    value: function updateFolderName(name) {\n      var _this2 = this;\n\n      this.setState({\n        name: name\n      }, function () {\n        return _this2.validateFolderName(name);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"section\", {\n        className: \"AddFolder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Create a folder\"), React.createElement(ErrorBoundary, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(NotefulForm, {\n        onSubmit: function onSubmit(event, name) {\n          return _this3.handleSubmit(event, _this3.state.folderName);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"folder-name-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"folder-name-input\",\n        onChange: function onChange(e) {\n          return _this3.updateFolderName(e.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(ValidationError, {\n        hasError: !this.state.folderNameValid,\n        message: this.state.validationMessages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        disabled: !this.state.folderNameValid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Add folder\")))));\n    }\n  }]);\n\n  return AddFolder;\n}(Component);\n\nAddFolder.contextType = AppContext;\nexport { AddFolder as default };","map":{"version":3,"sources":["/Users/Home/Projects/noteful-client-2/frontend/src/AddFolder/AddFolder.js"],"names":["React","Component","NotefulForm","AppContext","ValidationError","ErrorBoundary","AddFolder","state","folderName","folderNameValid","validationMessages","event","preventDefault","console","log","context","addFolder","name","fieldErrors","hasError","checkFolderNames","folders","filter","length","setState","formValid","validateFolderName","handleSubmit","e","updateFolderName","target","value","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport AppContext from '../AppContext';\nimport ValidationError from '../ValidationError';\nimport './AddFolder.css';\nimport ErrorBoundary from '../ErrorBoundary/ErrorBoundary';\n\nexport default class AddFolder extends Component {\n  static contextType = AppContext;\n\n  state = {\n    folderName: '',\n    folderNameValid: false,\n    validationMessages: null\n  };\n\n  handleSubmit(event, folderName) {\n    event.preventDefault();\n    console.log('handle submit ran');\n    this.context.addFolder(folderName);\n  }\n\n  validateFolderName(name) {\n    let fieldErrors = this.state.validationMessages;\n    let hasError = false;\n    const checkFolderNames = this.context.folders.filter(\n      folderName => name === folderName.name\n    );\n\n    if (checkFolderNames.length !== 0) {\n      fieldErrors = 'Folder name already exists';\n      hasError = true;\n    }\n\n    if (name.length === 0) {\n      fieldErrors = 'Folder must have a name';\n      hasError = true;\n    }\n\n    this.setState(\n      {\n        validationMessages: fieldErrors,\n        folderNameValid: !hasError\n      },\n      this.formValid(name)\n    );\n  }\n\n  formValid(name) {\n    if (this.state.folderNameValid) {\n      this.setState({ folderName: name });\n    }\n  }\n\n  updateFolderName(name) {\n    this.setState({ name }, () => this.validateFolderName(name));\n  }\n\n  render() {\n    return (\n      <section className=\"AddFolder\">\n        <h2>Create a folder</h2>\n        <ErrorBoundary>\n          <NotefulForm\n            onSubmit={(event, name) =>\n              this.handleSubmit(event, this.state.folderName)\n            }\n          >\n            <div className=\"field\">\n              <label htmlFor=\"folder-name-input\">Name</label>\n              <input\n                type=\"text\"\n                id=\"folder-name-input\"\n                onChange={e => this.updateFolderName(e.target.value)}\n              />\n              <ValidationError\n                hasError={!this.state.folderNameValid}\n                message={this.state.validationMessages}\n              />\n            </div>\n            <div className=\"buttons\">\n              <button type=\"submit\" disabled={!this.state.folderNameValid}>\n                Add folder\n              </button>\n            </div>\n          </NotefulForm>\n        </ErrorBoundary>\n      </section>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}